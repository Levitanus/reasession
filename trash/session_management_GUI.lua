local function msg(...)
    local args = {...}
    local message = ''
    for i, v in ipairs(args) do
        if i > 1 then
            message = message .. ', '
        end
        message = message .. tostring(v)
    end
    reaper.ShowConsoleMsg(message .. "\n")
end
reaper.ClearConsole()
--------------------------------------------------------------------------------

-- Script generated by Lokasenna's GUI Builder


function get_script_path()
  local info = debug.getinfo(1,'S')
  local script_path = info.source:match[[^@?(.*[\/])[^\/]-$]]
  return script_path
end

function get_file_separator()
  local OS = reaper.GetOS()
  if OS ~= "Win32" and OS ~= "Win64" then
    return "/"
  end
  return "\\"
end

local sep = get_file_separator()

local script_path = get_script_path() .. sep

package.path = package.path .. ";" .. script_path .."?.lua"

loadfile(script_path..sep.."Lokasenna_gui_liibrary"..sep.."Core.lua")()




GUI.req("Classes/Class - Label.lua")()
GUI.req("Classes/Class - Frame.lua")()
GUI.req("Classes/Class - Button.lua")()
GUI.req("Classes/Class - Tabs.lua")()
GUI.req("Classes/Class - Textbox.lua")()
GUI.req("Classes/Class - Listbox.lua")()
GUI.req("Classes/Class - Menubox.lua")()
GUI.req("Classes/Class - Window.lua")()
-- If any of the requested libraries weren't found, abort the script.
if missing_lib then return 0 end

require('project')
local pr = project



GUI.name = "session-management GUI"
GUI.x, GUI.y, GUI.w, GUI.h = 0, 0, 350, 300
GUI.anchor, GUI.corner = "mouse", "C"



GUI.New("add_slave_btn", "Button", {
    z = 11,
    x = 300.0,
    y = 0.0,
    w = 48,
    h = 20,
    caption = "add",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame"
})

GUI.New("project_box", "Menubox", {
    z = 11,
    x = 130.0,
    y = 0.0,
    w = 128,
    h = 20,
    caption = "current slave project:",
    optarray = {"Strings"},
    retval = 1,
    font_a = 3,
    font_b = 4,
    col_txt = "txt",
    col_cap = "txt",
    bg = "wnd_bg",
    pad = 4,
    noarrow = false,
    align = 0
})

GUI.New("server_status_lbl", "Label", {
    z = 11.0,
    x = 193.0,
    y = 48.0,
    caption = "connected",
    font = 3,
    color = "cyan",
    bg = "wnd_bg",
    shadow = false
})

GUI.New("project_decouple_btn", "Button", {
    z = 11,
    x = 280.0,
    y = 45.0,
    w = 60,
    h = 20,
    caption = "decouple",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame"
})

GUI.New("render_btn", "Button", {
    z = 11,
    x = 10.0,
    y = 260.0,
    w = 100,
    h = 24,
    caption = "Render",
    font = 2,
    col_txt = "txt",
    col_fill = "elm_frame"
})

GUI.New("decaouple_all_btn", "Button", {
    z = 11,
    x = 240.0,
    y = 260.0,
    w = 100,
    h = 24,
    caption = "decouple all",
    font = 2,
    col_txt = "txt",
    col_fill = "elm_frame"
})

GUI.New("project_server_txt", "Textbox", {
    z = 11.0,
    x = 60.0,
    y = 45.0,
    w = 128,
    h = 20,
    caption = "server:",
    cap_pos = "left",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    bg = "wnd_bg",
    shadow = true,
    pad = 4,
    undo_limit = 20
})




GUI.New("track_conn_add_btn", "Button", {
    z = 12.0,
    x = 20.0,
    y = 225.0,
    w = 48,
    h = 20,
    caption = "add",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame"
})

GUI.New("track_conn_rmv_btn", "Button", {
    z = 12.0,
    x = 280.0,
    y = 225.0,
    w = 48,
    h = 20,
    caption = "remove",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame"
})

GUI.New("track_conn_list", "Listbox", {
    z = 12.0,
    x = 20.0,
    y = 70.0,
    w = 310,
    h = 150,
    list = {"viI -> viI KONTAKT", "viII -> viII KONTAKT"},
    multi = false,
    caption = "",
    font_a = 3,
    font_b = 4,
    color = "txt",
    col_fill = "elm_fill",
    bg = "elm_bg",
    cap_bg = "wnd_bg",
    shadow = true,
    pad = 4
})

GUI.New("track_conn_edt_btn", "Button", {
    z = 12.0,
    x = 160.0,
    y = 225.0,
    w = 48,
    h = 20,
    caption = "edit",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame"
})




GUI.New("project_remove_btn", "Button", {
    z = 13.0,
    x = 70.0,
    y = 170.0,
    w = 200,
    h = 24,
    caption = "remove tracks and slave",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame"
})

GUI.New("project_save_btn", "Button", {
    z = 13.0,
    x = 70.0,
    y = 130.0,
    w = 200,
    h = 24,
    caption = "save template",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame"
})

GUI.New("Button1", "Button", {
    z = 13.0,
    x = 70.0,
    y = 90.0,
    w = 200,
    h = 24,
    caption = "add selected tracks to template",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame"
})




GUI.New("project_tbs", "Tabs", {
    z = 14.0,
    x = 0.0,
    y = 25.0,
    w = 912.0,
    caption = "project_tbs",
    optarray = {"track connections", " instance options"},
    tab_w = 100,
    tab_h = 20,
    pad = 8,
    font_a = 3,
    font_b = 4,
    col_txt = "txt",
    col_tab_a = "wnd_bg",
    col_tab_b = "tab_bg",
    bg = "elm_bg",
    fullwidth = true
})

GUI.elms.project_tbs:update_sets(
            {
                [1] = {12},
                [2] = {13},
            })

GUI.New("Frame1", "Frame", {
    z = 14.0,
    x = 0.0,
    y = 45.0,
    w = 350,
    h = 210,
    shadow = false,
    fill = false,
    color = "elm_frame",
    bg = "wnd_bg",
    round = 0,
    text = "",
    txt_indent = 0,
    txt_pad = 0,
    pad = 4,
    font = 4,
    col_txt = "txt"
})

local function center_x(w)
    return GUI.w/2 - w/2
end
local function center_y(h)
    return GUI.h/2 - h/2
end

GUI.redraw = function()
    for k,v in pairs(GUI.elms) do
        v:redraw()
    end
end

local function show_placeholder()
    for i=1,19 do
        GUI.elms_hide[i] = true
    end
    GUI.elms_hide[20] = false
    GUI.redraw()

end
local function show_project()
    if GUI.elms_hide[20] == true then return end
    for i=1,19 do
        GUI.elms_hide[i] = false
    end
    GUI.elms_hide[20] = true
    GUI.redraw()
end


GUI.New('register_btn', 'Button', {
    z = 20,
    x=center_x(200),y=center_y(25),w=200,h=25,
    caption = 'register project as master',
    func = function()
        pr.register('master')
        show_project()
    end
})


GUI.func = function()
    if pr.registered() == nil then
        show_placeholder()
    else
        show_project()
    end
    if  reaper.GetCurrentProjectInLoadSave() ~= nil then
        reaper.ShowConsoleMsg(reaper.GetCurrentProjectInLoadSave())
    end
end

pr.unregister()

for i=0,10 do
    retval, projfn = reaper.EnumProjects( i, '')
    msg(retval, type(retval), projfn)
end

reaper.Main_OnCommand(40862, 0)
-- reaper.Main_OnCommand( reaper.NamedCommandLookup('_SWS_PROJTAB2'), 0)

-- GUI.Init()
-- GUI.Main()